# #Eligibility
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.17
#

require 'date'

module ChangeHealthcare
  module Eligibility
    module SwaggerClient
      class AdditionalIdentification
        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=Y4 Agency Claim Number
        attr_accessor :agency_claim_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=CT Contract Number
        attr_accessor :contract_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=F6 Health Insurance (HIC) Number
        attr_accessor :health_insurance_claim_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=GH Identification Card Serial Number
        attr_accessor :identification_card_serial_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=IG Insurance Policy Number
        attr_accessor :insurance_policy_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=EA Medical Record Identification Number
        attr_accessor :medical_record_identification_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=1W Member Identification Number
        attr_accessor :member_identification_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=EJ Patient Account Number
        attr_accessor :patient_account_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=N6 Plan Network Identification Number
        attr_accessor :plan_network_identification_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=18 Plan Number
        attr_accessor :plan_number

        # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=1L Group or Policy Number
        attr_accessor :policy_number

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            'agency_claim_number': :agencyClaimNumber,
            'contract_number': :contractNumber,
            'health_insurance_claim_number': :healthInsuranceClaimNumber,
            'identification_card_serial_number': :identificationCardSerialNumber,
            'insurance_policy_number': :insurancePolicyNumber,
            'medical_record_identification_number': :medicalRecordIdentificationNumber,
            'member_identification_number': :memberIdentificationNumber,
            'patient_account_number': :patientAccountNumber,
            'plan_network_identification_number': :planNetworkIdentificationNumber,
            'plan_number': :planNumber,
            'policy_number': :policyNumber
          }
        end

        # Attribute type mapping.
        def self.swagger_types
          {
            'agency_claim_number': :String,
            'contract_number': :String,
            'health_insurance_claim_number': :String,
            'identification_card_serial_number': :String,
            'insurance_policy_number': :String,
            'medical_record_identification_number': :String,
            'member_identification_number': :String,
            'patient_account_number': :String,
            'plan_network_identification_number': :String,
            'plan_number': :String,
            'policy_number': :String
          }
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          return unless attributes.is_a?(Hash)

          # convert string to symbol for hash key
          attributes = attributes.transform_keys(&:to_sym)

          self.agency_claim_number = attributes[:agencyClaimNumber] if attributes.key?(:agencyClaimNumber)

          self.contract_number = attributes[:contractNumber] if attributes.key?(:contractNumber)

          self.health_insurance_claim_number = attributes[:healthInsuranceClaimNumber] if attributes.key?(:healthInsuranceClaimNumber)

          self.identification_card_serial_number = attributes[:identificationCardSerialNumber] if attributes.key?(:identificationCardSerialNumber)

          self.insurance_policy_number = attributes[:insurancePolicyNumber] if attributes.key?(:insurancePolicyNumber)

          self.medical_record_identification_number = attributes[:medicalRecordIdentificationNumber] if attributes.key?(:medicalRecordIdentificationNumber)

          self.member_identification_number = attributes[:memberIdentificationNumber] if attributes.key?(:memberIdentificationNumber)

          self.patient_account_number = attributes[:patientAccountNumber] if attributes.key?(:patientAccountNumber)

          self.plan_network_identification_number = attributes[:planNetworkIdentificationNumber] if attributes.key?(:planNetworkIdentificationNumber)

          self.plan_number = attributes[:planNumber] if attributes.key?(:planNumber)

          self.policy_number = attributes[:policyNumber] if attributes.key?(:policyNumber)
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          []
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          true
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if equal?(o)

          self.class == o.class &&
            agency_claim_number == o.agency_claim_number &&
            contract_number == o.contract_number &&
            health_insurance_claim_number == o.health_insurance_claim_number &&
            identification_card_serial_number == o.identification_card_serial_number &&
            insurance_policy_number == o.insurance_policy_number &&
            medical_record_identification_number == o.medical_record_identification_number &&
            member_identification_number == o.member_identification_number &&
            patient_account_number == o.patient_account_number &&
            plan_network_identification_number == o.plan_network_identification_number &&
            plan_number == o.plan_number &&
            policy_number == o.policy_number
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Fixnum] Hash code
        def hash
          [agency_claim_number, contract_number, health_insurance_claim_number, identification_card_serial_number, insurance_policy_number, medical_record_identification_number, member_identification_number, patient_account_number, plan_network_identification_number, plan_number, policy_number].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)

          self.class.swagger_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end # or else data not found in attributes(hash), not an issue as the data can be optional
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :BOOLEAN
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            temp_model = SwaggerClient.const_get(type).new
            temp_model.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = send(attr)
            next if value.nil?

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
