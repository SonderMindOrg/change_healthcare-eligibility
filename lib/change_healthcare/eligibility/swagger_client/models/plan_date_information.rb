=begin
#Eligibility

#Reference for developers

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module SwaggerClient
  class PlanDateInformation
    attr_accessor :added

    attr_accessor :admission

    attr_accessor :benefit

    attr_accessor :benefit_begin

    attr_accessor :benefit_end

    attr_accessor :certification

    attr_accessor :cobra_begin

    attr_accessor :cobra_end

    attr_accessor :completion

    attr_accessor :coordination_of_benefits

    attr_accessor :date_of_death

    attr_accessor :date_of_last_update

    attr_accessor :discharge

    attr_accessor :effective_date_of_change

    attr_accessor :eligibility

    attr_accessor :eligibility_begin

    attr_accessor :eligibility_end

    attr_accessor :enrollment

    attr_accessor :issue

    attr_accessor :latest_visit_or_consultation

    attr_accessor :period_end

    attr_accessor :period_start

    attr_accessor :plan

    attr_accessor :plan_begin

    attr_accessor :plan_end

    attr_accessor :policy_effective

    attr_accessor :policy_expiration

    attr_accessor :premium_paid_to_date_begin

    attr_accessor :premium_paid_to_date_end

    attr_accessor :primary_care_provider

    attr_accessor :service

    attr_accessor :status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'added' => :'added',
        :'admission' => :'admission',
        :'benefit' => :'benefit',
        :'benefit_begin' => :'benefitBegin',
        :'benefit_end' => :'benefitEnd',
        :'certification' => :'certification',
        :'cobra_begin' => :'cobraBegin',
        :'cobra_end' => :'cobraEnd',
        :'completion' => :'completion',
        :'coordination_of_benefits' => :'coordinationOfBenefits',
        :'date_of_death' => :'dateOfDeath',
        :'date_of_last_update' => :'dateOfLastUpdate',
        :'discharge' => :'discharge',
        :'effective_date_of_change' => :'effectiveDateOfChange',
        :'eligibility' => :'eligibility',
        :'eligibility_begin' => :'eligibilityBegin',
        :'eligibility_end' => :'eligibilityEnd',
        :'enrollment' => :'enrollment',
        :'issue' => :'issue',
        :'latest_visit_or_consultation' => :'latestVisitOrConsultation',
        :'period_end' => :'periodEnd',
        :'period_start' => :'periodStart',
        :'plan' => :'plan',
        :'plan_begin' => :'planBegin',
        :'plan_end' => :'planEnd',
        :'policy_effective' => :'policyEffective',
        :'policy_expiration' => :'policyExpiration',
        :'premium_paid_to_date_begin' => :'premiumPaidToDateBegin',
        :'premium_paid_to_date_end' => :'premiumPaidToDateEnd',
        :'primary_care_provider' => :'primaryCareProvider',
        :'service' => :'service',
        :'status' => :'status'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'added' => :'String',
        :'admission' => :'String',
        :'benefit' => :'String',
        :'benefit_begin' => :'String',
        :'benefit_end' => :'String',
        :'certification' => :'String',
        :'cobra_begin' => :'String',
        :'cobra_end' => :'String',
        :'completion' => :'String',
        :'coordination_of_benefits' => :'String',
        :'date_of_death' => :'String',
        :'date_of_last_update' => :'String',
        :'discharge' => :'String',
        :'effective_date_of_change' => :'String',
        :'eligibility' => :'String',
        :'eligibility_begin' => :'String',
        :'eligibility_end' => :'String',
        :'enrollment' => :'String',
        :'issue' => :'String',
        :'latest_visit_or_consultation' => :'String',
        :'period_end' => :'String',
        :'period_start' => :'String',
        :'plan' => :'String',
        :'plan_begin' => :'String',
        :'plan_end' => :'String',
        :'policy_effective' => :'String',
        :'policy_expiration' => :'String',
        :'premium_paid_to_date_begin' => :'String',
        :'premium_paid_to_date_end' => :'String',
        :'primary_care_provider' => :'String',
        :'service' => :'String',
        :'status' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'added')
        self.added = attributes[:'added']
      end

      if attributes.has_key?(:'admission')
        self.admission = attributes[:'admission']
      end

      if attributes.has_key?(:'benefit')
        self.benefit = attributes[:'benefit']
      end

      if attributes.has_key?(:'benefitBegin')
        self.benefit_begin = attributes[:'benefitBegin']
      end

      if attributes.has_key?(:'benefitEnd')
        self.benefit_end = attributes[:'benefitEnd']
      end

      if attributes.has_key?(:'certification')
        self.certification = attributes[:'certification']
      end

      if attributes.has_key?(:'cobraBegin')
        self.cobra_begin = attributes[:'cobraBegin']
      end

      if attributes.has_key?(:'cobraEnd')
        self.cobra_end = attributes[:'cobraEnd']
      end

      if attributes.has_key?(:'completion')
        self.completion = attributes[:'completion']
      end

      if attributes.has_key?(:'coordinationOfBenefits')
        self.coordination_of_benefits = attributes[:'coordinationOfBenefits']
      end

      if attributes.has_key?(:'dateOfDeath')
        self.date_of_death = attributes[:'dateOfDeath']
      end

      if attributes.has_key?(:'dateOfLastUpdate')
        self.date_of_last_update = attributes[:'dateOfLastUpdate']
      end

      if attributes.has_key?(:'discharge')
        self.discharge = attributes[:'discharge']
      end

      if attributes.has_key?(:'effectiveDateOfChange')
        self.effective_date_of_change = attributes[:'effectiveDateOfChange']
      end

      if attributes.has_key?(:'eligibility')
        self.eligibility = attributes[:'eligibility']
      end

      if attributes.has_key?(:'eligibilityBegin')
        self.eligibility_begin = attributes[:'eligibilityBegin']
      end

      if attributes.has_key?(:'eligibilityEnd')
        self.eligibility_end = attributes[:'eligibilityEnd']
      end

      if attributes.has_key?(:'enrollment')
        self.enrollment = attributes[:'enrollment']
      end

      if attributes.has_key?(:'issue')
        self.issue = attributes[:'issue']
      end

      if attributes.has_key?(:'latestVisitOrConsultation')
        self.latest_visit_or_consultation = attributes[:'latestVisitOrConsultation']
      end

      if attributes.has_key?(:'periodEnd')
        self.period_end = attributes[:'periodEnd']
      end

      if attributes.has_key?(:'periodStart')
        self.period_start = attributes[:'periodStart']
      end

      if attributes.has_key?(:'plan')
        self.plan = attributes[:'plan']
      end

      if attributes.has_key?(:'planBegin')
        self.plan_begin = attributes[:'planBegin']
      end

      if attributes.has_key?(:'planEnd')
        self.plan_end = attributes[:'planEnd']
      end

      if attributes.has_key?(:'policyEffective')
        self.policy_effective = attributes[:'policyEffective']
      end

      if attributes.has_key?(:'policyExpiration')
        self.policy_expiration = attributes[:'policyExpiration']
      end

      if attributes.has_key?(:'premiumPaidToDateBegin')
        self.premium_paid_to_date_begin = attributes[:'premiumPaidToDateBegin']
      end

      if attributes.has_key?(:'premiumPaidToDateEnd')
        self.premium_paid_to_date_end = attributes[:'premiumPaidToDateEnd']
      end

      if attributes.has_key?(:'primaryCareProvider')
        self.primary_care_provider = attributes[:'primaryCareProvider']
      end

      if attributes.has_key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          added == o.added &&
          admission == o.admission &&
          benefit == o.benefit &&
          benefit_begin == o.benefit_begin &&
          benefit_end == o.benefit_end &&
          certification == o.certification &&
          cobra_begin == o.cobra_begin &&
          cobra_end == o.cobra_end &&
          completion == o.completion &&
          coordination_of_benefits == o.coordination_of_benefits &&
          date_of_death == o.date_of_death &&
          date_of_last_update == o.date_of_last_update &&
          discharge == o.discharge &&
          effective_date_of_change == o.effective_date_of_change &&
          eligibility == o.eligibility &&
          eligibility_begin == o.eligibility_begin &&
          eligibility_end == o.eligibility_end &&
          enrollment == o.enrollment &&
          issue == o.issue &&
          latest_visit_or_consultation == o.latest_visit_or_consultation &&
          period_end == o.period_end &&
          period_start == o.period_start &&
          plan == o.plan &&
          plan_begin == o.plan_begin &&
          plan_end == o.plan_end &&
          policy_effective == o.policy_effective &&
          policy_expiration == o.policy_expiration &&
          premium_paid_to_date_begin == o.premium_paid_to_date_begin &&
          premium_paid_to_date_end == o.premium_paid_to_date_end &&
          primary_care_provider == o.primary_care_provider &&
          service == o.service &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [added, admission, benefit, benefit_begin, benefit_end, certification, cobra_begin, cobra_end, completion, coordination_of_benefits, date_of_death, date_of_last_update, discharge, effective_date_of_change, eligibility, eligibility_begin, eligibility_end, enrollment, issue, latest_visit_or_consultation, period_end, period_start, plan, plan_begin, plan_end, policy_effective, policy_expiration, premium_paid_to_date_begin, premium_paid_to_date_end, primary_care_provider, service, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
