=begin
#Eligibility

#Reference for developers

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module SwaggerClient
  class BenefitsInformation
    attr_accessor :additional_information

    attr_accessor :auth_or_cert_indicator

    attr_accessor :benefit_amount

    attr_accessor :benefit_percent

    attr_accessor :benefit_quantity

    attr_accessor :benefits_additional_information

    attr_accessor :benefits_date_information

    attr_accessor :benefits_related_entity

    attr_accessor :benefits_service_delivery

    attr_accessor :code

    attr_accessor :composite_medical_procedure_identifier

    attr_accessor :coverage_level

    attr_accessor :coverage_level_code

    attr_accessor :eligibility_additional_information

    attr_accessor :header_loop_identifier_code

    attr_accessor :in_plan_network_indicator

    attr_accessor :in_plan_network_indicator_code

    attr_accessor :insurance_type

    attr_accessor :insurance_type_code

    attr_accessor :name

    attr_accessor :plan_coverage

    attr_accessor :quantity_qualifier

    attr_accessor :quantity_qualifier_code

    attr_accessor :service_type_codes

    attr_accessor :service_types

    attr_accessor :time_qualifier

    attr_accessor :time_qualifier_code

    attr_accessor :trailer_loop_identifier_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_information' => :'additionalInformation',
        :'auth_or_cert_indicator' => :'authOrCertIndicator',
        :'benefit_amount' => :'benefitAmount',
        :'benefit_percent' => :'benefitPercent',
        :'benefit_quantity' => :'benefitQuantity',
        :'benefits_additional_information' => :'benefitsAdditionalInformation',
        :'benefits_date_information' => :'benefitsDateInformation',
        :'benefits_related_entity' => :'benefitsRelatedEntity',
        :'benefits_service_delivery' => :'benefitsServiceDelivery',
        :'code' => :'code',
        :'composite_medical_procedure_identifier' => :'compositeMedicalProcedureIdentifier',
        :'coverage_level' => :'coverageLevel',
        :'coverage_level_code' => :'coverageLevelCode',
        :'eligibility_additional_information' => :'eligibilityAdditionalInformation',
        :'header_loop_identifier_code' => :'headerLoopIdentifierCode',
        :'in_plan_network_indicator' => :'inPlanNetworkIndicator',
        :'in_plan_network_indicator_code' => :'inPlanNetworkIndicatorCode',
        :'insurance_type' => :'insuranceType',
        :'insurance_type_code' => :'insuranceTypeCode',
        :'name' => :'name',
        :'plan_coverage' => :'planCoverage',
        :'quantity_qualifier' => :'quantityQualifier',
        :'quantity_qualifier_code' => :'quantityQualifierCode',
        :'service_type_codes' => :'serviceTypeCodes',
        :'service_types' => :'serviceTypes',
        :'time_qualifier' => :'timeQualifier',
        :'time_qualifier_code' => :'timeQualifierCode',
        :'trailer_loop_identifier_code' => :'trailerLoopIdentifierCode'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'additional_information' => :'Array<AdditionalInformation>',
        :'auth_or_cert_indicator' => :'String',
        :'benefit_amount' => :'String',
        :'benefit_percent' => :'String',
        :'benefit_quantity' => :'String',
        :'benefits_additional_information' => :'BenefitsAdditionalInformation',
        :'benefits_date_information' => :'BenefitsDateInformation',
        :'benefits_related_entity' => :'BenefitsRelatedEntity',
        :'benefits_service_delivery' => :'Array<BenefitsServiceDelivery>',
        :'code' => :'String',
        :'composite_medical_procedure_identifier' => :'CompositeMedicalProcedureIdentifier',
        :'coverage_level' => :'String',
        :'coverage_level_code' => :'String',
        :'eligibility_additional_information' => :'EligibilityAdditionalInformation',
        :'header_loop_identifier_code' => :'String',
        :'in_plan_network_indicator' => :'String',
        :'in_plan_network_indicator_code' => :'String',
        :'insurance_type' => :'String',
        :'insurance_type_code' => :'String',
        :'name' => :'String',
        :'plan_coverage' => :'String',
        :'quantity_qualifier' => :'String',
        :'quantity_qualifier_code' => :'String',
        :'service_type_codes' => :'Array<String>',
        :'service_types' => :'Array<String>',
        :'time_qualifier' => :'String',
        :'time_qualifier_code' => :'String',
        :'trailer_loop_identifier_code' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'additionalInformation')
        if (value = attributes[:'additionalInformation']).is_a?(Array)
          self.additional_information = value
        end
      end

      if attributes.has_key?(:'authOrCertIndicator')
        self.auth_or_cert_indicator = attributes[:'authOrCertIndicator']
      end

      if attributes.has_key?(:'benefitAmount')
        self.benefit_amount = attributes[:'benefitAmount']
      end

      if attributes.has_key?(:'benefitPercent')
        self.benefit_percent = attributes[:'benefitPercent']
      end

      if attributes.has_key?(:'benefitQuantity')
        self.benefit_quantity = attributes[:'benefitQuantity']
      end

      if attributes.has_key?(:'benefitsAdditionalInformation')
        self.benefits_additional_information = attributes[:'benefitsAdditionalInformation']
      end

      if attributes.has_key?(:'benefitsDateInformation')
        self.benefits_date_information = attributes[:'benefitsDateInformation']
      end

      if attributes.has_key?(:'benefitsRelatedEntity')
        self.benefits_related_entity = attributes[:'benefitsRelatedEntity']
      end

      if attributes.has_key?(:'benefitsServiceDelivery')
        if (value = attributes[:'benefitsServiceDelivery']).is_a?(Array)
          self.benefits_service_delivery = value
        end
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'compositeMedicalProcedureIdentifier')
        self.composite_medical_procedure_identifier = attributes[:'compositeMedicalProcedureIdentifier']
      end

      if attributes.has_key?(:'coverageLevel')
        self.coverage_level = attributes[:'coverageLevel']
      end

      if attributes.has_key?(:'coverageLevelCode')
        self.coverage_level_code = attributes[:'coverageLevelCode']
      end

      if attributes.has_key?(:'eligibilityAdditionalInformation')
        self.eligibility_additional_information = attributes[:'eligibilityAdditionalInformation']
      end

      if attributes.has_key?(:'headerLoopIdentifierCode')
        self.header_loop_identifier_code = attributes[:'headerLoopIdentifierCode']
      end

      if attributes.has_key?(:'inPlanNetworkIndicator')
        self.in_plan_network_indicator = attributes[:'inPlanNetworkIndicator']
      end

      if attributes.has_key?(:'inPlanNetworkIndicatorCode')
        self.in_plan_network_indicator_code = attributes[:'inPlanNetworkIndicatorCode']
      end

      if attributes.has_key?(:'insuranceType')
        self.insurance_type = attributes[:'insuranceType']
      end

      if attributes.has_key?(:'insuranceTypeCode')
        self.insurance_type_code = attributes[:'insuranceTypeCode']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'planCoverage')
        self.plan_coverage = attributes[:'planCoverage']
      end

      if attributes.has_key?(:'quantityQualifier')
        self.quantity_qualifier = attributes[:'quantityQualifier']
      end

      if attributes.has_key?(:'quantityQualifierCode')
        self.quantity_qualifier_code = attributes[:'quantityQualifierCode']
      end

      if attributes.has_key?(:'serviceTypeCodes')
        if (value = attributes[:'serviceTypeCodes']).is_a?(Array)
          self.service_type_codes = value
        end
      end

      if attributes.has_key?(:'serviceTypes')
        if (value = attributes[:'serviceTypes']).is_a?(Array)
          self.service_types = value
        end
      end

      if attributes.has_key?(:'timeQualifier')
        self.time_qualifier = attributes[:'timeQualifier']
      end

      if attributes.has_key?(:'timeQualifierCode')
        self.time_qualifier_code = attributes[:'timeQualifierCode']
      end

      if attributes.has_key?(:'trailerLoopIdentifierCode')
        self.trailer_loop_identifier_code = attributes[:'trailerLoopIdentifierCode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_information == o.additional_information &&
          auth_or_cert_indicator == o.auth_or_cert_indicator &&
          benefit_amount == o.benefit_amount &&
          benefit_percent == o.benefit_percent &&
          benefit_quantity == o.benefit_quantity &&
          benefits_additional_information == o.benefits_additional_information &&
          benefits_date_information == o.benefits_date_information &&
          benefits_related_entity == o.benefits_related_entity &&
          benefits_service_delivery == o.benefits_service_delivery &&
          code == o.code &&
          composite_medical_procedure_identifier == o.composite_medical_procedure_identifier &&
          coverage_level == o.coverage_level &&
          coverage_level_code == o.coverage_level_code &&
          eligibility_additional_information == o.eligibility_additional_information &&
          header_loop_identifier_code == o.header_loop_identifier_code &&
          in_plan_network_indicator == o.in_plan_network_indicator &&
          in_plan_network_indicator_code == o.in_plan_network_indicator_code &&
          insurance_type == o.insurance_type &&
          insurance_type_code == o.insurance_type_code &&
          name == o.name &&
          plan_coverage == o.plan_coverage &&
          quantity_qualifier == o.quantity_qualifier &&
          quantity_qualifier_code == o.quantity_qualifier_code &&
          service_type_codes == o.service_type_codes &&
          service_types == o.service_types &&
          time_qualifier == o.time_qualifier &&
          time_qualifier_code == o.time_qualifier_code &&
          trailer_loop_identifier_code == o.trailer_loop_identifier_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [additional_information, auth_or_cert_indicator, benefit_amount, benefit_percent, benefit_quantity, benefits_additional_information, benefits_date_information, benefits_related_entity, benefits_service_delivery, code, composite_medical_procedure_identifier, coverage_level, coverage_level_code, eligibility_additional_information, header_loop_identifier_code, in_plan_network_indicator, in_plan_network_indicator_code, insurance_type, insurance_type_code, name, plan_coverage, quantity_qualifier, quantity_qualifier_code, service_type_codes, service_types, time_qualifier, time_qualifier_code, trailer_loop_identifier_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
