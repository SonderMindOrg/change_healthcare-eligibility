=begin
#Eligibility

#Reference for developers

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module SwaggerClient
  # Loop: 2000D, Notes: Dependent Detail
  class RequestDependent
    # Loop: 2100[C|D], Segment: REF Notes: Additional Identification
    attr_accessor :additional_identification

    # Loop: 2100[C|D], Segment: N3 and N4, Notes: Address
    attr_accessor :address

    # Loop: 2110[C|D], Segment: DTP, Element: DTP03, Notes: DTP01=102, DTP02=RD8 Retired
    attr_accessor :beginning_card_issue_date

    # Loop: 2110[C|D], Segment: DTP, Element: DTP03, Notes: DTP01=291, DTP02=RD8 Retired
    attr_accessor :beginning_plan_issue_date

    # Loop: 2100D Segment: INS, Element: INS17, Notes: Birth Sequence Number - must be exactly 9 positive unsigned numeric characters.
    attr_accessor :birth_sequence_number

    # Loop: 2100[C|D], Segment: DMG, Element: DMG02, Notes: date of birth in CCYYMMDD
    attr_accessor :date_of_birth

    # Loop: 2100D Segment: REF, Element: REF02, Notes: REF01=MRC  Eligibility Category
    attr_accessor :eligibility_category

    # Loop: 2110[C|D], Segment: DTP, Element: DTP03, Notes: DTP01=102, DTP02=RD8 Retired
    attr_accessor :end_card_issue_date

    # Loop: 2110[C|D], Segment: DTP, Element: DTP03, Notes: DTP01=291, DTP02=RD8 Retired
    attr_accessor :end_plan_issue_date

    # Loop: 2100[C|D], Segment: MN1, Element: NM104, Notes: firstName 1-35 alphanumberic characters
    attr_accessor :first_name

    # Loop: 2100[C|D], Segment: DMG, Element: DMG03, Notes: gender 1 character 'M' or 'F'
    attr_accessor :gender

    # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=6P Group Number
    attr_accessor :group_number

    # Loop: 2100[C|D], Segment: HI, Element: HI01-1 HI01-2, Notes: Health Care Diagnosis
    attr_accessor :health_care_code_information

    # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=HJ Identity Card Number
    attr_accessor :id_card

    # Loop: 2110[C|D], Segment: DTP, Element: DTP03, Notes: DTP01=102, DTP02=D8 Retired
    attr_accessor :id_card_issue_date

    # Loop: 2100D Segment: INS, Element: INS02, Notes: Individual Relationship Code 01 - Spouse, 19 - Child, 34 Other Adult
    attr_accessor :individual_relationship_code

    # Loop: 2100D Segment: REF, Element: REF02, Notes: REF01=IF  Issue Number
    attr_accessor :issue_number

    # Loop: 2100[C|D], Segment: MN1, Element: NM103, Notes: lastName 1-60 alphanumberic characters
    attr_accessor :last_name

    # Loop: 2100[C|D] Segment: MN1, Element: NM109, Notes: NM108=MI, memberId 2-80 alphanumberic characters
    attr_accessor :member_id

    # Loop: 2100[C|D], Segment: MN1, Element: NM105, Notes: middleName 1-25 alphanumberic characters
    attr_accessor :middle_name

    # Loop: 2110[C|D], Segment: DTP, Element: DTP03, Notes: DTP01=291, DTP02=D8 Retired
    attr_accessor :plan_issue_date

    # Loop: 2100[C|D], Segment: PRV, Element: PRV01, Notes: Provider Code
    attr_accessor :provider_code

    # Loop: 2100[C|D], Segment: PRV, Element: PRV03, Notes: Provider Identifier
    attr_accessor :provider_identifier

    # Loop: 2100[C|D], Segment: PRV, Element: PRV02, Notes: Reference Identification Qualifier
    attr_accessor :reference_identification_qualifier

    # Loop: 2100[C|D], Segment: REF, Element: REF02, Notes: REF01=SY Social Security Number
    attr_accessor :ssn

    # Loop: 2100[C|D], Segment: MN1, Element: NM107, Notes: lastName 1-10 alphanumberic characters
    attr_accessor :suffix

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_identification' => :'additionalIdentification',
        :'address' => :'address',
        :'beginning_card_issue_date' => :'beginningCardIssueDate',
        :'beginning_plan_issue_date' => :'beginningPlanIssueDate',
        :'birth_sequence_number' => :'birthSequenceNumber',
        :'date_of_birth' => :'dateOfBirth',
        :'eligibility_category' => :'eligibilityCategory',
        :'end_card_issue_date' => :'endCardIssueDate',
        :'end_plan_issue_date' => :'endPlanIssueDate',
        :'first_name' => :'firstName',
        :'gender' => :'gender',
        :'group_number' => :'groupNumber',
        :'health_care_code_information' => :'healthCareCodeInformation',
        :'id_card' => :'idCard',
        :'id_card_issue_date' => :'idCardIssueDate',
        :'individual_relationship_code' => :'individualRelationshipCode',
        :'issue_number' => :'issueNumber',
        :'last_name' => :'lastName',
        :'member_id' => :'memberId',
        :'middle_name' => :'middleName',
        :'plan_issue_date' => :'planIssueDate',
        :'provider_code' => :'providerCode',
        :'provider_identifier' => :'providerIdentifier',
        :'reference_identification_qualifier' => :'referenceIdentificationQualifier',
        :'ssn' => :'ssn',
        :'suffix' => :'suffix'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'additional_identification' => :'AdditionalIdentification',
        :'address' => :'Address',
        :'beginning_card_issue_date' => :'String',
        :'beginning_plan_issue_date' => :'String',
        :'birth_sequence_number' => :'String',
        :'date_of_birth' => :'String',
        :'eligibility_category' => :'String',
        :'end_card_issue_date' => :'String',
        :'end_plan_issue_date' => :'String',
        :'first_name' => :'String',
        :'gender' => :'String',
        :'group_number' => :'String',
        :'health_care_code_information' => :'Array<HealthCareInformation>',
        :'id_card' => :'String',
        :'id_card_issue_date' => :'String',
        :'individual_relationship_code' => :'String',
        :'issue_number' => :'String',
        :'last_name' => :'String',
        :'member_id' => :'String',
        :'middle_name' => :'String',
        :'plan_issue_date' => :'String',
        :'provider_code' => :'String',
        :'provider_identifier' => :'String',
        :'reference_identification_qualifier' => :'String',
        :'ssn' => :'String',
        :'suffix' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'additionalIdentification')
        self.additional_identification = attributes[:'additionalIdentification']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'beginningCardIssueDate')
        self.beginning_card_issue_date = attributes[:'beginningCardIssueDate']
      end

      if attributes.has_key?(:'beginningPlanIssueDate')
        self.beginning_plan_issue_date = attributes[:'beginningPlanIssueDate']
      end

      if attributes.has_key?(:'birthSequenceNumber')
        self.birth_sequence_number = attributes[:'birthSequenceNumber']
      end

      if attributes.has_key?(:'dateOfBirth')
        self.date_of_birth = attributes[:'dateOfBirth']
      end

      if attributes.has_key?(:'eligibilityCategory')
        self.eligibility_category = attributes[:'eligibilityCategory']
      end

      if attributes.has_key?(:'endCardIssueDate')
        self.end_card_issue_date = attributes[:'endCardIssueDate']
      end

      if attributes.has_key?(:'endPlanIssueDate')
        self.end_plan_issue_date = attributes[:'endPlanIssueDate']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.has_key?(:'groupNumber')
        self.group_number = attributes[:'groupNumber']
      end

      if attributes.has_key?(:'healthCareCodeInformation')
        if (value = attributes[:'healthCareCodeInformation']).is_a?(Array)
          self.health_care_code_information = value
        end
      end

      if attributes.has_key?(:'idCard')
        self.id_card = attributes[:'idCard']
      end

      if attributes.has_key?(:'idCardIssueDate')
        self.id_card_issue_date = attributes[:'idCardIssueDate']
      end

      if attributes.has_key?(:'individualRelationshipCode')
        self.individual_relationship_code = attributes[:'individualRelationshipCode']
      end

      if attributes.has_key?(:'issueNumber')
        self.issue_number = attributes[:'issueNumber']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'memberId')
        self.member_id = attributes[:'memberId']
      end

      if attributes.has_key?(:'middleName')
        self.middle_name = attributes[:'middleName']
      end

      if attributes.has_key?(:'planIssueDate')
        self.plan_issue_date = attributes[:'planIssueDate']
      end

      if attributes.has_key?(:'providerCode')
        self.provider_code = attributes[:'providerCode']
      end

      if attributes.has_key?(:'providerIdentifier')
        self.provider_identifier = attributes[:'providerIdentifier']
      end

      if attributes.has_key?(:'referenceIdentificationQualifier')
        self.reference_identification_qualifier = attributes[:'referenceIdentificationQualifier']
      end

      if attributes.has_key?(:'ssn')
        self.ssn = attributes[:'ssn']
      end

      if attributes.has_key?(:'suffix')
        self.suffix = attributes[:'suffix']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      individual_relationship_code_validator = EnumAttributeValidator.new('String', ['01', '19', '34'])
      return false unless individual_relationship_code_validator.valid?(@individual_relationship_code)
      provider_code_validator = EnumAttributeValidator.new('String', ['AD', 'AT', 'BI', 'CO', 'CV', 'H', 'HH', 'LA', 'OT', 'P1', 'P2', 'PC', 'PE', 'R', 'RF', 'SK', 'SU'])
      return false unless provider_code_validator.valid?(@provider_code)
      reference_identification_qualifier_validator = EnumAttributeValidator.new('String', ['9K', 'D3', 'EI', 'HPI', 'PXC', 'SY', 'TJ'])
      return false unless reference_identification_qualifier_validator.valid?(@reference_identification_qualifier)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] individual_relationship_code Object to be assigned
    def individual_relationship_code=(individual_relationship_code)
      validator = EnumAttributeValidator.new('String', ['01', '19', '34'])
      unless validator.valid?(individual_relationship_code)
        fail ArgumentError, 'invalid value for "individual_relationship_code", must be one of #{validator.allowable_values}.'
      end
      @individual_relationship_code = individual_relationship_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] provider_code Object to be assigned
    def provider_code=(provider_code)
      validator = EnumAttributeValidator.new('String', ['AD', 'AT', 'BI', 'CO', 'CV', 'H', 'HH', 'LA', 'OT', 'P1', 'P2', 'PC', 'PE', 'R', 'RF', 'SK', 'SU'])
      unless validator.valid?(provider_code)
        fail ArgumentError, 'invalid value for "provider_code", must be one of #{validator.allowable_values}.'
      end
      @provider_code = provider_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference_identification_qualifier Object to be assigned
    def reference_identification_qualifier=(reference_identification_qualifier)
      validator = EnumAttributeValidator.new('String', ['9K', 'D3', 'EI', 'HPI', 'PXC', 'SY', 'TJ'])
      unless validator.valid?(reference_identification_qualifier)
        fail ArgumentError, 'invalid value for "reference_identification_qualifier", must be one of #{validator.allowable_values}.'
      end
      @reference_identification_qualifier = reference_identification_qualifier
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_identification == o.additional_identification &&
          address == o.address &&
          beginning_card_issue_date == o.beginning_card_issue_date &&
          beginning_plan_issue_date == o.beginning_plan_issue_date &&
          birth_sequence_number == o.birth_sequence_number &&
          date_of_birth == o.date_of_birth &&
          eligibility_category == o.eligibility_category &&
          end_card_issue_date == o.end_card_issue_date &&
          end_plan_issue_date == o.end_plan_issue_date &&
          first_name == o.first_name &&
          gender == o.gender &&
          group_number == o.group_number &&
          health_care_code_information == o.health_care_code_information &&
          id_card == o.id_card &&
          id_card_issue_date == o.id_card_issue_date &&
          individual_relationship_code == o.individual_relationship_code &&
          issue_number == o.issue_number &&
          last_name == o.last_name &&
          member_id == o.member_id &&
          middle_name == o.middle_name &&
          plan_issue_date == o.plan_issue_date &&
          provider_code == o.provider_code &&
          provider_identifier == o.provider_identifier &&
          reference_identification_qualifier == o.reference_identification_qualifier &&
          ssn == o.ssn &&
          suffix == o.suffix
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [additional_identification, address, beginning_card_issue_date, beginning_plan_issue_date, birth_sequence_number, date_of_birth, eligibility_category, end_card_issue_date, end_plan_issue_date, first_name, gender, group_number, health_care_code_information, id_card, id_card_issue_date, individual_relationship_code, issue_number, last_name, member_id, middle_name, plan_issue_date, provider_code, provider_identifier, reference_identification_qualifier, ssn, suffix].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
