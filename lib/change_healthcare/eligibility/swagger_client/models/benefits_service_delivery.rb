# #Eligibility
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.17
#

require 'date'

module ChangeHealthcare
  module Eligibility
    module SwaggerClient
      class BenefitsServiceDelivery
        attr_accessor :delivery_or_calendar_pattern_code, :delivery_pattern_time_code, :num_of_periods, :quantity, :quantity_qualifier, :sample_selection_modulus, :time_period_qualifier, :unit_for_measurement_code

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            'delivery_or_calendar_pattern_code': :deliveryOrCalendarPatternCode,
            'delivery_pattern_time_code': :deliveryPatternTimeCode,
            'num_of_periods': :numOfPeriods,
            'quantity': :quantity,
            'quantity_qualifier': :quantityQualifier,
            'sample_selection_modulus': :sampleSelectionModulus,
            'time_period_qualifier': :timePeriodQualifier,
            'unit_for_measurement_code': :unitForMeasurementCode
          }
        end

        # Attribute type mapping.
        def self.swagger_types
          {
            'delivery_or_calendar_pattern_code': :String,
            'delivery_pattern_time_code': :String,
            'num_of_periods': :String,
            'quantity': :String,
            'quantity_qualifier': :String,
            'sample_selection_modulus': :String,
            'time_period_qualifier': :String,
            'unit_for_measurement_code': :String
          }
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          return unless attributes.is_a?(Hash)

          # convert string to symbol for hash key
          attributes = attributes.transform_keys(&:to_sym)

          self.delivery_or_calendar_pattern_code = attributes[:deliveryOrCalendarPatternCode] if attributes.key?(:deliveryOrCalendarPatternCode)

          self.delivery_pattern_time_code = attributes[:deliveryPatternTimeCode] if attributes.key?(:deliveryPatternTimeCode)

          self.num_of_periods = attributes[:numOfPeriods] if attributes.key?(:numOfPeriods)

          self.quantity = attributes[:quantity] if attributes.key?(:quantity)

          self.quantity_qualifier = attributes[:quantityQualifier] if attributes.key?(:quantityQualifier)

          self.sample_selection_modulus = attributes[:sampleSelectionModulus] if attributes.key?(:sampleSelectionModulus)

          self.time_period_qualifier = attributes[:timePeriodQualifier] if attributes.key?(:timePeriodQualifier)

          self.unit_for_measurement_code = attributes[:unitForMeasurementCode] if attributes.key?(:unitForMeasurementCode)
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          []
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          true
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if equal?(o)

          self.class == o.class &&
            delivery_or_calendar_pattern_code == o.delivery_or_calendar_pattern_code &&
            delivery_pattern_time_code == o.delivery_pattern_time_code &&
            num_of_periods == o.num_of_periods &&
            quantity == o.quantity &&
            quantity_qualifier == o.quantity_qualifier &&
            sample_selection_modulus == o.sample_selection_modulus &&
            time_period_qualifier == o.time_period_qualifier &&
            unit_for_measurement_code == o.unit_for_measurement_code
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Fixnum] Hash code
        def hash
          [delivery_or_calendar_pattern_code, delivery_pattern_time_code, num_of_periods, quantity, quantity_qualifier, sample_selection_modulus, time_period_qualifier, unit_for_measurement_code].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)

          self.class.swagger_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end # or else data not found in attributes(hash), not an issue as the data can be optional
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :BOOLEAN
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            temp_model = SwaggerClient.const_get(type).new
            temp_model.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = send(attr)
            next if value.nil?

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
