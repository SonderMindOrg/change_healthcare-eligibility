# #Eligibility
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.17
#

require 'date'

module ChangeHealthcare
  module Eligibility
    module SwaggerClient
      class Response
        attr_accessor :benefits_information, :errors, :implementation_transaction_set_syntax_error, :plan_date_information, :plan_status, :status, :transaction_set_acknowledgement, :x12

        # Segment: ISA, Element: ISA13, Notes: Interchange Control Number original request
        attr_accessor :control_number

        # Loop: 2100D, Notes: Dependent Details
        attr_accessor :dependents

        # Loop: 2100A, Segments: NM1 and PER, Notes: Information Source Name
        attr_accessor :payer

        # Loop: 2110[C|D], Segments: REF, Notes: Subscriber/Dependent Additional Identification
        attr_accessor :plan_information

        # Loop: 2000B/2100B, Segment: NM1 and PRV, Notes: Information Receiver
        attr_accessor :provider

        # Segment: ISA, Element: ISA13, Notes: Interchange Control Number
        attr_accessor :reassociation_key

        # Loop: 2000C/2100C, Segment: NM1, REF, DMG, INS, MPI, PRV, Notes: Subscriber Details
        attr_accessor :subscriber

        # Loop: 2100[C|D], Segment: TRN, Notes: Subscriber Trace Numbers
        attr_accessor :subscriber_trace_numbers

        # This property is a feature of Trading Partner API, if you are not using Trading Partner API
        attr_accessor :trading_partner_id

        # This is the payorId or Identification Code that was sent in the 270
        attr_accessor :trading_partner_service_id

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            'benefits_information': :benefitsInformation,
            'control_number': :controlNumber,
            'dependents': :dependents,
            'errors': :errors,
            'implementation_transaction_set_syntax_error': :implementationTransactionSetSyntaxError,
            'payer': :payer,
            'plan_date_information': :planDateInformation,
            'plan_information': :planInformation,
            'plan_status': :planStatus,
            'provider': :provider,
            'reassociation_key': :reassociationKey,
            'status': :status,
            'subscriber': :subscriber,
            'subscriber_trace_numbers': :subscriberTraceNumbers,
            'trading_partner_id': :tradingPartnerId,
            'trading_partner_service_id': :tradingPartnerServiceId,
            'transaction_set_acknowledgement': :transactionSetAcknowledgement,
            'x12': :x12
          }
        end

        # Attribute type mapping.
        def self.swagger_types
          {
            'benefits_information': :'Array<BenefitsInformation>',
            'control_number': :String,
            'dependents': :'Array<Loop2000CD2100CDSegmentNM1REFDMGINSMPIPRVNotesResponseMember>',
            'errors': :'Array<Error>',
            'implementation_transaction_set_syntax_error': :String,
            'payer': :Loop2100ASegmentsNM1AndPERNotesInformationSourceName,
            'plan_date_information': :PlanDateInformation,
            'plan_information': :Loop2110CDSegmentsREFNotesSubscriberDependentAdditionalIdentification,
            'plan_status': :'Array<PlanStatus>',
            'provider': :Loop2100BCDSegmentNM1PRVNotesProvider,
            'reassociation_key': :String,
            'status': :String,
            'subscriber': :Loop2000CD2100CDSegmentNM1REFDMGINSMPIPRVNotesResponseMember,
            'subscriber_trace_numbers': :'Array<Loop2100CDSegmentTRNNotesSubscriberTraceNumbers>',
            'trading_partner_id': :String,
            'trading_partner_service_id': :String,
            'transaction_set_acknowledgement': :String,
            'x12': :String
          }
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          return unless attributes.is_a?(Hash)

          # convert string to symbol for hash key
          attributes = attributes.transform_keys(&:to_sym)

          if attributes.key?(:benefitsInformation)
            if (value = attributes[:benefitsInformation]).is_a?(Array)
              self.benefits_information = value
            end
          end

          self.control_number = attributes[:controlNumber] if attributes.key?(:controlNumber)

          if attributes.key?(:dependents)
            if (value = attributes[:dependents]).is_a?(Array)
              self.dependents = value
            end
          end

          if attributes.key?(:errors)
            if (value = attributes[:errors]).is_a?(Array)
              self.errors = value
            end
          end

          if attributes.key?(:implementationTransactionSetSyntaxError)
            self.implementation_transaction_set_syntax_error = attributes[:implementationTransactionSetSyntaxError]
          end

          self.payer = attributes[:payer] if attributes.key?(:payer)

          self.plan_date_information = attributes[:planDateInformation] if attributes.key?(:planDateInformation)

          self.plan_information = attributes[:planInformation] if attributes.key?(:planInformation)

          if attributes.key?(:planStatus)
            if (value = attributes[:planStatus]).is_a?(Array)
              self.plan_status = value
            end
          end

          self.provider = attributes[:provider] if attributes.key?(:provider)

          self.reassociation_key = attributes[:reassociationKey] if attributes.key?(:reassociationKey)

          self.status = attributes[:status] if attributes.key?(:status)

          self.subscriber = attributes[:subscriber] if attributes.key?(:subscriber)

          if attributes.key?(:subscriberTraceNumbers)
            if (value = attributes[:subscriberTraceNumbers]).is_a?(Array)
              self.subscriber_trace_numbers = value
            end
          end

          self.trading_partner_id = attributes[:tradingPartnerId] if attributes.key?(:tradingPartnerId)

          self.trading_partner_service_id = attributes[:tradingPartnerServiceId] if attributes.key?(:tradingPartnerServiceId)

          self.transaction_set_acknowledgement = attributes[:transactionSetAcknowledgement] if attributes.key?(:transactionSetAcknowledgement)

          self.x12 = attributes[:x12] if attributes.key?(:x12)
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          []
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          true
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if equal?(o)

          self.class == o.class &&
            benefits_information == o.benefits_information &&
            control_number == o.control_number &&
            dependents == o.dependents &&
            errors == o.errors &&
            implementation_transaction_set_syntax_error == o.implementation_transaction_set_syntax_error &&
            payer == o.payer &&
            plan_date_information == o.plan_date_information &&
            plan_information == o.plan_information &&
            plan_status == o.plan_status &&
            provider == o.provider &&
            reassociation_key == o.reassociation_key &&
            status == o.status &&
            subscriber == o.subscriber &&
            subscriber_trace_numbers == o.subscriber_trace_numbers &&
            trading_partner_id == o.trading_partner_id &&
            trading_partner_service_id == o.trading_partner_service_id &&
            transaction_set_acknowledgement == o.transaction_set_acknowledgement &&
            x12 == o.x12
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Fixnum] Hash code
        def hash
          [benefits_information, control_number, dependents, errors, implementation_transaction_set_syntax_error, payer, plan_date_information, plan_information, plan_status, provider, reassociation_key, status, subscriber, subscriber_trace_numbers, trading_partner_id, trading_partner_service_id, transaction_set_acknowledgement, x12].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)

          self.class.swagger_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end # or else data not found in attributes(hash), not an issue as the data can be optional
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :BOOLEAN
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            temp_model = SwaggerClient.const_get(type).new
            temp_model.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = send(attr)
            next if value.nil?

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
