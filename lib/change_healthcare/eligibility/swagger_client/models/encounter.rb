=begin
#Eligibility

#Reference for developers

OpenAPI spec version: v3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.17

=end

require 'date'

module SwaggerClient
  # Loop: 2110[C|D], Notes: Eligibility or Benefit Information
  class Encounter
    # Loop: 2100[C|D], Segment: DTP, Element: DTP02, Notes: Date Time Period
    attr_accessor :beginning_date_of_service

    # Loop: 2100[C|D], Segment: DTP, Element: DTP02, Notes: Date Time Period
    attr_accessor :date_of_service

    attr_accessor :date_range

    # Loop: 2110[C|D], Segment: EQ, Element: EQ05, Notes: Composite Diagnosis Code Pointer
    attr_accessor :diagnosis_code_pointer

    # Loop: 2100[C|D], Segment: DTP, Element: DTP02, Notes: Date Time Period
    attr_accessor :end_date_of_service

    # Loop: 2110[C|D], Segment: III, Element: III02, Notes: III01=ZZ Industry Code, Allowed Values are: '01' Pharmacy,'03' School,'04' Homeless Shelter,'05' Indian Health Service Free-standing Facility,'06' Indian Health Service Provider-based Facility,'07' Tribal 638 Free-standing Facility,'08' Tribal 638 Provider-based Facility,'11' Office,'12' Home,'13' Assisted Living Facility,'14' Group Home,'15' Mobile Unit,'20' Urgent Care Facility,'21' Inpatient Hospital,'22' Outpatient Hospital,'23' Emergency Room - Hospital,'24' Ambulatory Surgical Center,'25' Birthing Center,'26' Military Treatment Facility,'31' Skilled Nursing Facility,'32' Nursing Facility,'33' Custodial Care Facility,'34' Hospice,'41' Ambulance - Land,'42' Ambulance - Air or Water,'49' Independent Clinic,'50' Federally Qualified Health Center,'51' Inpatient Psychiatric Facility,'52' Psychiatric Facility - Partial Hospitalization,'53' Community Mental Health Center,'54' Intermediate Care Facility/Mentally Retarded,'55' Residential Substance Abuse Treatment Facility,'56' Psychiatric Residential Treatment Center,'57' Non-residential Substance Abuse Treatment Facility,'60' Mass Immunization Center,'61'Comprehensive Inpatient Rehabilitation Facility,'62' Comprehensive Outpatient Rehabilitation Facility,'65' End-Stage Renal Disease Treatment Facility,'71' Public Health Clinic,'72' Rural Health Clinic,'81' Independent Laboratory,'99' Other Place of Service
    attr_accessor :industry_code

    # Loop: 2110[C|D], Segment: EQ, Element: EQ02-1-3, Notes: Composite Medical Procedure Identifier
    attr_accessor :medical_procedures

    # Loop: 2110[C|D], Segment: REF, Element: REF02, Notes: Prior Authorization or Referral Number
    attr_accessor :prior_authorization_or_referral_number

    # Loop: 2110[C|D], Segment: EQ, Element: EQ02-2, Notes: Composite Medical Procedure Identifier - Procedure Code
    attr_accessor :procedure_code

    # Loop: 2110[C|D], Segment: EQ, Element: EQ02-3, Notes: Composite Medical Procedure Identifier - Procedure Modifier
    attr_accessor :procedure_modifiers

    # Loop: 2110[C|D], Segment: EQ, Element: EQ02-1, Notes: Composite Medical Procedure Identifier - Product or Service ID Qualifier, Allowed Values are: 'AD' American Dental Association Codes, 'CJ' Current Procedural Terminology (CPT) Codes,'HC' Health Care Financing Administration Common Procedural Coding System (HCPCS) Codes,'ID' International Classification of Diseases, 9th Revision, Clinical Modification (ICD-9-CM) - Procedure, 'IV' Home Infusion EDI Coalition (HIEC) Product/Service Code, 'N4' National Drug Code in 5-4-2 Format, 'ZZ' Mutually Defined
    attr_accessor :product_or_service_id_qualifier

    # Loop: 2110[C|D], Segment: REF, Element: REF01, Notes: Prior Authorization or Referral Number, Allowed Values are: '9F' Referral Number, 'G1' Prior Authorization Number
    attr_accessor :reference_identification_qualifier

    # Loop: 2110[C|D], Segment: EQ, Element: EQ01, Notes: Service Type Codes
    attr_accessor :service_type_codes

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'beginning_date_of_service' => :'beginningDateOfService',
        :'date_of_service' => :'dateOfService',
        :'date_range' => :'dateRange',
        :'diagnosis_code_pointer' => :'diagnosisCodePointer',
        :'end_date_of_service' => :'endDateOfService',
        :'industry_code' => :'industryCode',
        :'medical_procedures' => :'medicalProcedures',
        :'prior_authorization_or_referral_number' => :'priorAuthorizationOrReferralNumber',
        :'procedure_code' => :'procedureCode',
        :'procedure_modifiers' => :'procedureModifiers',
        :'product_or_service_id_qualifier' => :'productOrServiceIDQualifier',
        :'reference_identification_qualifier' => :'referenceIdentificationQualifier',
        :'service_type_codes' => :'serviceTypeCodes'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'beginning_date_of_service' => :'String',
        :'date_of_service' => :'String',
        :'date_range' => :'BOOLEAN',
        :'diagnosis_code_pointer' => :'Array<String>',
        :'end_date_of_service' => :'String',
        :'industry_code' => :'String',
        :'medical_procedures' => :'Array<MedicalProcedure>',
        :'prior_authorization_or_referral_number' => :'String',
        :'procedure_code' => :'String',
        :'procedure_modifiers' => :'Array<String>',
        :'product_or_service_id_qualifier' => :'String',
        :'reference_identification_qualifier' => :'String',
        :'service_type_codes' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'beginningDateOfService')
        self.beginning_date_of_service = attributes[:'beginningDateOfService']
      end

      if attributes.has_key?(:'dateOfService')
        self.date_of_service = attributes[:'dateOfService']
      end

      if attributes.has_key?(:'dateRange')
        self.date_range = attributes[:'dateRange']
      end

      if attributes.has_key?(:'diagnosisCodePointer')
        if (value = attributes[:'diagnosisCodePointer']).is_a?(Array)
          self.diagnosis_code_pointer = value
        end
      end

      if attributes.has_key?(:'endDateOfService')
        self.end_date_of_service = attributes[:'endDateOfService']
      end

      if attributes.has_key?(:'industryCode')
        self.industry_code = attributes[:'industryCode']
      end

      if attributes.has_key?(:'medicalProcedures')
        if (value = attributes[:'medicalProcedures']).is_a?(Array)
          self.medical_procedures = value
        end
      end

      if attributes.has_key?(:'priorAuthorizationOrReferralNumber')
        self.prior_authorization_or_referral_number = attributes[:'priorAuthorizationOrReferralNumber']
      end

      if attributes.has_key?(:'procedureCode')
        self.procedure_code = attributes[:'procedureCode']
      end

      if attributes.has_key?(:'procedureModifiers')
        if (value = attributes[:'procedureModifiers']).is_a?(Array)
          self.procedure_modifiers = value
        end
      end

      if attributes.has_key?(:'productOrServiceIDQualifier')
        self.product_or_service_id_qualifier = attributes[:'productOrServiceIDQualifier']
      end

      if attributes.has_key?(:'referenceIdentificationQualifier')
        self.reference_identification_qualifier = attributes[:'referenceIdentificationQualifier']
      end

      if attributes.has_key?(:'serviceTypeCodes')
        if (value = attributes[:'serviceTypeCodes']).is_a?(Array)
          self.service_type_codes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      industry_code_validator = EnumAttributeValidator.new('String', ['01', '03', '04', '05', '06', '07', '08', '11', '12', '13', '14', '15', '20', '21', '22', '23', '24', '25', '26', '31', '32', '33', '34', '41', '42', '49', '50', '51', '52', '53', '54', '55', '56', '57', '60', '61', '62', '65', '71', '72', '81', '99'])
      return false unless industry_code_validator.valid?(@industry_code)
      product_or_service_id_qualifier_validator = EnumAttributeValidator.new('String', ['AD', 'CJ', 'HC', 'ID', 'IV', 'N4', 'ZZ'])
      return false unless product_or_service_id_qualifier_validator.valid?(@product_or_service_id_qualifier)
      reference_identification_qualifier_validator = EnumAttributeValidator.new('String', ['9F', 'G1'])
      return false unless reference_identification_qualifier_validator.valid?(@reference_identification_qualifier)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] industry_code Object to be assigned
    def industry_code=(industry_code)
      validator = EnumAttributeValidator.new('String', ['01', '03', '04', '05', '06', '07', '08', '11', '12', '13', '14', '15', '20', '21', '22', '23', '24', '25', '26', '31', '32', '33', '34', '41', '42', '49', '50', '51', '52', '53', '54', '55', '56', '57', '60', '61', '62', '65', '71', '72', '81', '99'])
      unless validator.valid?(industry_code)
        fail ArgumentError, 'invalid value for "industry_code", must be one of #{validator.allowable_values}.'
      end
      @industry_code = industry_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_or_service_id_qualifier Object to be assigned
    def product_or_service_id_qualifier=(product_or_service_id_qualifier)
      validator = EnumAttributeValidator.new('String', ['AD', 'CJ', 'HC', 'ID', 'IV', 'N4', 'ZZ'])
      unless validator.valid?(product_or_service_id_qualifier)
        fail ArgumentError, 'invalid value for "product_or_service_id_qualifier", must be one of #{validator.allowable_values}.'
      end
      @product_or_service_id_qualifier = product_or_service_id_qualifier
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference_identification_qualifier Object to be assigned
    def reference_identification_qualifier=(reference_identification_qualifier)
      validator = EnumAttributeValidator.new('String', ['9F', 'G1'])
      unless validator.valid?(reference_identification_qualifier)
        fail ArgumentError, 'invalid value for "reference_identification_qualifier", must be one of #{validator.allowable_values}.'
      end
      @reference_identification_qualifier = reference_identification_qualifier
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          beginning_date_of_service == o.beginning_date_of_service &&
          date_of_service == o.date_of_service &&
          date_range == o.date_range &&
          diagnosis_code_pointer == o.diagnosis_code_pointer &&
          end_date_of_service == o.end_date_of_service &&
          industry_code == o.industry_code &&
          medical_procedures == o.medical_procedures &&
          prior_authorization_or_referral_number == o.prior_authorization_or_referral_number &&
          procedure_code == o.procedure_code &&
          procedure_modifiers == o.procedure_modifiers &&
          product_or_service_id_qualifier == o.product_or_service_id_qualifier &&
          reference_identification_qualifier == o.reference_identification_qualifier &&
          service_type_codes == o.service_type_codes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [beginning_date_of_service, date_of_service, date_range, diagnosis_code_pointer, end_date_of_service, industry_code, medical_procedures, prior_authorization_or_referral_number, procedure_code, procedure_modifiers, product_or_service_id_qualifier, reference_identification_qualifier, service_type_codes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
