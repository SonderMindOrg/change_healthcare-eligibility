# #Eligibility
#
# Reference for developers
#
# OpenAPI spec version: v3
#
# Generated by: https://github.com/swagger-api/swagger-codegen.git
# Swagger Codegen version: 2.4.17
#

require 'date'

module ChangeHealthcare
  module Eligibility
    module SwaggerClient
      # Loop: 2100B, Notes: Information Receiver Name
      class InformationReceiverName
        # Loop: 2100B, Segment: N3 and N4, Notes: Information Receiver Address
        attr_accessor :address

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=CT Contact Number
        attr_accessor :contact_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=EL Electronic Device Pin Number
        attr_accessor :device_pin_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=1J Facility ID Number
        attr_accessor :facility_id_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=N7 Facility Network Identification Number
        attr_accessor :facility_network_id_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=TJ Federal Taxpayer’s Identification Number
        attr_accessor :federal_taxpayer_identification_number

        # Loop: 2100B, Segment: REF, Element: REF03, Notes: REF01=0B REF02=stateLicenceNumber Federal Taxpayer’s Identification Number
        attr_accessor :information_receiver_additional_identifier_state

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=1D Medicaid Provider Number
        attr_accessor :medicaid_provider_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=1C Medicare Provider Number
        attr_accessor :medicare_provider_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=HPI Centers for Medicare and Medicaid Services National Provider Identifier
        attr_accessor :national_provider_identifier

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=Q4 Prior Identifier Number
        attr_accessor :prior_identifier_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=N5 Provider Plan Network Identification Number
        attr_accessor :provider_plan_network_id_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=SY Social Security Number
        attr_accessor :social_security_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=0B State License Number
        attr_accessor :state_licence_number

        # Loop: 2100B, Segment: REF, Element: REF02, Notes: REF01=EO Submitter Identification Number
        attr_accessor :submitter_id_number

        # Attribute mapping from ruby-style variable name to JSON key.
        def self.attribute_map
          {
            'address': :address,
            'contact_number': :contactNumber,
            'device_pin_number': :devicePinNumber,
            'facility_id_number': :facilityIdNumber,
            'facility_network_id_number': :facilityNetworkIdNumber,
            'federal_taxpayer_identification_number': :federalTaxpayerIdentificationNumber,
            'information_receiver_additional_identifier_state': :informationReceiverAdditionalIdentifierState,
            'medicaid_provider_number': :medicaidProviderNumber,
            'medicare_provider_number': :medicareProviderNumber,
            'national_provider_identifier': :nationalProviderIdentifier,
            'prior_identifier_number': :priorIdentifierNumber,
            'provider_plan_network_id_number': :providerPlanNetworkIdNumber,
            'social_security_number': :socialSecurityNumber,
            'state_licence_number': :stateLicenceNumber,
            'submitter_id_number': :submitterIdNumber
          }
        end

        # Attribute type mapping.
        def self.swagger_types
          {
            'address': :Address,
            'contact_number': :String,
            'device_pin_number': :String,
            'facility_id_number': :String,
            'facility_network_id_number': :String,
            'federal_taxpayer_identification_number': :String,
            'information_receiver_additional_identifier_state': :String,
            'medicaid_provider_number': :String,
            'medicare_provider_number': :String,
            'national_provider_identifier': :String,
            'prior_identifier_number': :String,
            'provider_plan_network_id_number': :String,
            'social_security_number': :String,
            'state_licence_number': :String,
            'submitter_id_number': :String
          }
        end

        # Initializes the object
        # @param [Hash] attributes Model attributes in the form of hash
        def initialize(attributes = {})
          return unless attributes.is_a?(Hash)

          # convert string to symbol for hash key
          attributes = attributes.transform_keys(&:to_sym)

          self.address = attributes[:address] if attributes.key?(:address)

          self.contact_number = attributes[:contactNumber] if attributes.key?(:contactNumber)

          self.device_pin_number = attributes[:devicePinNumber] if attributes.key?(:devicePinNumber)

          self.facility_id_number = attributes[:facilityIdNumber] if attributes.key?(:facilityIdNumber)

          self.facility_network_id_number = attributes[:facilityNetworkIdNumber] if attributes.key?(:facilityNetworkIdNumber)

          if attributes.key?(:federalTaxpayerIdentificationNumber)
            self.federal_taxpayer_identification_number = attributes[:federalTaxpayerIdentificationNumber]
          end

          if attributes.key?(:informationReceiverAdditionalIdentifierState)
            self.information_receiver_additional_identifier_state = attributes[:informationReceiverAdditionalIdentifierState]
          end

          self.medicaid_provider_number = attributes[:medicaidProviderNumber] if attributes.key?(:medicaidProviderNumber)

          self.medicare_provider_number = attributes[:medicareProviderNumber] if attributes.key?(:medicareProviderNumber)

          self.national_provider_identifier = attributes[:nationalProviderIdentifier] if attributes.key?(:nationalProviderIdentifier)

          self.prior_identifier_number = attributes[:priorIdentifierNumber] if attributes.key?(:priorIdentifierNumber)

          self.provider_plan_network_id_number = attributes[:providerPlanNetworkIdNumber] if attributes.key?(:providerPlanNetworkIdNumber)

          self.social_security_number = attributes[:socialSecurityNumber] if attributes.key?(:socialSecurityNumber)

          self.state_licence_number = attributes[:stateLicenceNumber] if attributes.key?(:stateLicenceNumber)

          self.submitter_id_number = attributes[:submitterIdNumber] if attributes.key?(:submitterIdNumber)
        end

        # Show invalid properties with the reasons. Usually used together with valid?
        # @return Array for valid properties with the reasons
        def list_invalid_properties
          []
        end

        # Check to see if the all the properties in the model are valid
        # @return true if the model is valid
        def valid?
          true
        end

        # Checks equality by comparing each attribute.
        # @param [Object] Object to be compared
        def ==(o)
          return true if equal?(o)

          self.class == o.class &&
            address == o.address &&
            contact_number == o.contact_number &&
            device_pin_number == o.device_pin_number &&
            facility_id_number == o.facility_id_number &&
            facility_network_id_number == o.facility_network_id_number &&
            federal_taxpayer_identification_number == o.federal_taxpayer_identification_number &&
            information_receiver_additional_identifier_state == o.information_receiver_additional_identifier_state &&
            medicaid_provider_number == o.medicaid_provider_number &&
            medicare_provider_number == o.medicare_provider_number &&
            national_provider_identifier == o.national_provider_identifier &&
            prior_identifier_number == o.prior_identifier_number &&
            provider_plan_network_id_number == o.provider_plan_network_id_number &&
            social_security_number == o.social_security_number &&
            state_licence_number == o.state_licence_number &&
            submitter_id_number == o.submitter_id_number
        end

        # @see the `==` method
        # @param [Object] Object to be compared
        def eql?(o)
          self == o
        end

        # Calculates hash code according to all attributes.
        # @return [Fixnum] Hash code
        def hash
          [address, contact_number, device_pin_number, facility_id_number, facility_network_id_number, federal_taxpayer_identification_number, information_receiver_additional_identifier_state, medicaid_provider_number, medicare_provider_number, national_provider_identifier, prior_identifier_number, provider_plan_network_id_number, social_security_number, state_licence_number, submitter_id_number].hash
        end

        # Builds the object from hash
        # @param [Hash] attributes Model attributes in the form of hash
        # @return [Object] Returns the model itself
        def build_from_hash(attributes)
          return nil unless attributes.is_a?(Hash)

          self.class.swagger_types.each_pair do |key, type|
            if type =~ /\AArray<(.*)>/i
              # check to ensure the input is an array given that the attribute
              # is documented as an array but the input is not
              if attributes[self.class.attribute_map[key]].is_a?(Array)
                send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
              end
            elsif !attributes[self.class.attribute_map[key]].nil?
              send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
            end # or else data not found in attributes(hash), not an issue as the data can be optional
          end

          self
        end

        # Deserializes the data based on type
        # @param string type Data type
        # @param string value Value to be deserialized
        # @return [Object] Deserialized data
        def _deserialize(type, value)
          case type.to_sym
          when :DateTime
            DateTime.parse(value)
          when :Date
            Date.parse(value)
          when :String
            value.to_s
          when :Integer
            value.to_i
          when :Float
            value.to_f
          when :BOOLEAN
            if value.to_s =~ /\A(true|t|yes|y|1)\z/i
              true
            else
              false
            end
          when :Object
            # generic object (usually a Hash), return directly
            value
          when /\AArray<(?<inner_type>.+)>\z/
            inner_type = Regexp.last_match[:inner_type]
            value.map { |v| _deserialize(inner_type, v) }
          when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
            k_type = Regexp.last_match[:k_type]
            v_type = Regexp.last_match[:v_type]
            {}.tap do |hash|
              value.each do |k, v|
                hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
              end
            end
          else # model
            temp_model = SwaggerClient.const_get(type).new
            temp_model.build_from_hash(value)
          end
        end

        # Returns the string representation of the object
        # @return [String] String presentation of the object
        def to_s
          to_hash.to_s
        end

        # to_body is an alias to to_hash (backward compatibility)
        # @return [Hash] Returns the object in the form of hash
        def to_body
          to_hash
        end

        # Returns the object in the form of hash
        # @return [Hash] Returns the object in the form of hash
        def to_hash
          hash = {}
          self.class.attribute_map.each_pair do |attr, param|
            value = send(attr)
            next if value.nil?

            hash[param] = _to_hash(value)
          end
          hash
        end

        # Outputs non-array value in the form of hash
        # For object, use to_hash. Otherwise, just return the value
        # @param [Object] value Any valid value
        # @return [Hash] Returns the value in the form of hash
        def _to_hash(value)
          if value.is_a?(Array)
            value.compact.map { |v| _to_hash(v) }
          elsif value.is_a?(Hash)
            {}.tap do |hash|
              value.each { |k, v| hash[k] = _to_hash(v) }
            end
          elsif value.respond_to? :to_hash
            value.to_hash
          else
            value
          end
        end
      end
    end
  end
end
